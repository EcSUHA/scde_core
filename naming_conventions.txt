Coding Style for project SCDE:


 - don't use tabulators -> tab = 4 spaces
 - line width should be 100 characters 
 - indentation 4 chars





---------------------------------------------------------------------------------------------------
Naming conventions for project SCDE:

int *zeiger4, *zeiger5; 
int *

pointers       p_xxx, lower_case
struct names   xxx_s, lower_case
typedef's      xxx_s, lower_case 
struct Members  lower_case

Function naming:
Public functions    pfx_xxx, Title_Case (pfx = replaceable module prefix)
Core functions   Title_Case
Functions that are there, but shouldn't be called directly, or have obscure uses _Title_Case

_ underscore -> copy & paster helper prefix

Trivial variables   i,x,n,f etc...
Local variables lower_case
Global variables?    g_lower_case (searchable by g_ prefix)

Enum        	E_Title_Case
Enum Members    ALL_CAPS

All macros and constants in caps: MAX_BUFFER_SIZE, TRACKING_ID_PREFIX.
---------------------------------------------------------------------------------------------------

Reserved Names in project SCDE:
'definition_name' (def-name) , name of an definition 
'definition_spec' (def-spec) definition specification, search argument for definitions

'p_definition'
'definition_name'
'dev_spec'
'p_attr_name'
'attr_name'
'p_attr_value'
'attr_value'
'attr_timestamp'


under construction:

Struct names and typedef's in camelcase: GtkWidget, TrackingOrder.
Functions that operate on structs: classic C style: gtk_widget_show(), tracking_order_process().
Pointers: nothing fancy here: GtkWidget *foo, TrackingOrder *bar.
Global variables: just don't use global variables. They are evil.
Functions that are there, but shouldn't be called directly, or have obscure uses, or whatever: one or more underscores at the beginning: _refrobnicate_data_tables(), _destroy_cache().


--- short words ---
// conn -> connection slot
  Telnet_DConnSlotData_t* conn = (Telnet_DConnSlotData_t*) userData;

// def -> entry definition 
  Entry_Telnet_Definition_t* def = conn->conn;
